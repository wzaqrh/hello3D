struct UnityLight
{
    half3 color;
    half3 dir;
    half  ndotl; // Deprecated: Ndotl is now calculated on the fly and is no longer stored. Do not used it.
};

struct UnityIndirect
{
    half3 diffuse;
    half3 specular;
};

struct UnityGI
{
    UnityLight light;
    UnityIndirect indirect;
};


struct SurfaceOutput {
    fixed3 Albedo;
    fixed3 Normal;
    fixed3 Emission;
    half Specular;
    fixed Gloss;
    fixed Alpha;
};

struct SurfaceOutputStandard
{
    fixed3 Albedo;      // base (diffuse or specular) color
    float3 Normal;      // tangent space normal, if written
    half3 Emission;
    half Metallic;      // 0=non-metal, 1=metal
    // Smoothness is the user facing name, it should be perceptual smoothness but user should not have to deal with it.
    // Everywhere in the code you meet smoothness it is perceptual smoothness
    half Smoothness;    // 0=rough, 1=smooth
    half Occlusion;     // occlusion (default 1)
    fixed Alpha;        // alpha for transparencies
};

inline fixed4 UnityLambertLight (SurfaceOutput s, UnityLight light);
inline fixed4 LightingLambert (SurfaceOutput s, UnityGI gi);
inline fixed4 LightingBlinnPhong (SurfaceOutput s, half3 viewDir, UnityGI gi);

SurfaceInput:
float3 viewDir - 包含视图方向，用于计算视差效果、边缘光照等等。
具有 COLOR 语义的 float4 - 包含插值的每顶点颜色。
float4 screenPos - 包含反射或屏幕空间效果的屏幕空间位置。请注意，这不适合 GrabPass；您需要使用 ComputeGrabScreenPos 函数自己计算自定义 UV。
float3 worldPos - 包含世界空间位置。
float3 worldRefl - 在_表面着色器不写入 o.Normal_ 的情况下，包含世界反射矢量。有关示例，请参阅反光漫射 (Reflect-Diffuse) 着色器。
float3 worldNormal - 在_表面着色器不写入 o.Normal_ 的情况下，包含世界法线矢量。
float3 worldRefl; INTERNAL_DATA - 在_表面着色器写入 o.Normal_ 的情况下，包含世界反射矢量。要获得基于每像素法线贴图的反射矢量，请使用 WorldReflectionVector (IN, o.Normal)。有关示例，请参阅反光凹凸 (Reflect-Bumped) 着色器。
float3 worldNormal; INTERNAL_DATA - 在_表面着色器写入 o.Normal_ 的情况下，包含世界法线矢量。要获得基于每像素法线贴图的法线矢量，请使用 WorldNormalVector (IN, o.Normal)

tex2D(MainTex, uv_MainTex)
UnpackNormal(tex2D(BumpMap, uv_BumpMap))